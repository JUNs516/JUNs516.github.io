<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>sqlite 并发操作</title>
    <link href="/2022/08/16/sqlite-%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/08/16/sqlite-%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<!-- * @Author: JUNs516 1694403905@qq.com * @Date: 2022-08-16 14:32:53 * @LastEditors: JUNs516 1694403905@qq.com * @LastEditTime: 2022-08-16 14:53:26 * @FilePath: \fwq\Hexo\source\_posts\sqlite-并发操作.md * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE--><h2 id="sqlite-的基本认识"><a href="#sqlite-的基本认识" class="headerlink" title="sqlite 的基本认识"></a>sqlite 的基本认识</h2><p>sqlite 官网自述：<br>SQLite 不能与 MySQL、Oracle、PostgreSQL 或 SQL Server 等客户端/服务器 SQL 数据库引擎直接比较，因为 SQLite 试图解决<strong>不同的问题</strong>。</p><p>客户端/服务器 SQL 数据库引擎努力实现企业数据的共享存储库。他们强调可扩展性、并发性、集中化和控制。SQLite 致力于为单个应用程序和设备提供本地数据存储。SQLite 强调<strong>经济、效率、可靠性、独立性和简单性</strong>。</p><p>SQLite 不与客户端/服务器数据库竞争。SQLite 与fopen()竞争。</p><h2 id="如何去选择数据库"><a href="#如何去选择数据库" class="headerlink" title="如何去选择数据库"></a>如何去选择数据库</h2><h3 id="1-数据是否通过网络与应用程序分开？→-选择客户端-服务器"><a href="#1-数据是否通过网络与应用程序分开？→-选择客户端-服务器" class="headerlink" title="1.数据是否通过网络与应用程序分开？→ 选择客户端/服务器"></a>1.数据是否通过网络与应用程序分开？→ 选择客户端/服务器</h3><p>关系数据库引擎充当减少带宽的数据过滤器。所以最好将数据库引擎和数据保持在同一个物理设备上，这样高带宽的引擎到磁盘的链路就不必穿越网络，只有低带宽的应用程序到引擎的链路。</p><p>但是 SQLite 是内置在应用程序中的。因此，如果数据位于与应用程序不同的设备上，则需要更高带宽的引擎到磁盘链路通过网络。这可行，但不是最理想的。因此，当数据位于与应用程序不同的设备上时，通常最好选择客户端/服务器数据库引擎。</p><p>注意事项： 在此规则中，“应用程序”是指发出 SQL 语句的代码。如果“应用程序”是应用程序服务器，并且内容与应用程序服务器驻留在同一台物理机器上，那么即使最终用户在另一个网络跃点之外，SQLite 仍可能适用。</p><h3 id="2-多并发？→-选择客户端-服务器"><a href="#2-多并发？→-选择客户端-服务器" class="headerlink" title="2.多并发？→ 选择客户端/服务器"></a>2.多并发？→ 选择客户端/服务器</h3><p>如果许多线程和/或进程需要同时写入数据库（并且它们不能排队轮流），那么最好选择支持该功能的数据库引擎，这始终意味着客户端/服务器数据库引擎。</p><p>SQLite 每个数据库文件一次只支持一个写入器。但在大多数情况下，一个写事务只需要几毫秒，因此多个写者可以简单地轮流。SQLite 将处理比许多人想象的更多的写并发。然而，客户端/服务器数据库系统，因为他们手头有一个长时间运行的服务器进程来协调访问，通常可以处理比 SQLite 更多的写入并发。</p><h3 id="3-大数据？→-选择客户端-服务器"><a href="#3-大数据？→-选择客户端-服务器" class="headerlink" title="3.大数据？→ 选择客户端/服务器"></a>3.大数据？→ 选择客户端/服务器</h3><p>如果您的数据将增长到您不舒服或无法放入单个磁盘文件的大小，那么您应该选择 SQLite 以外的解决方案。SQLite 支持最大 281 TB 大小的数据库，假设您可以找到支持 281 TB 文件的磁盘驱动器和文件系统。即便如此，当内容的大小看起来可能会达到 TB 级时，最好考虑使用集中式客户端/服务器数据库。</p><h3 id="4-否则-→-选择-SQLite！"><a href="#4-否则-→-选择-SQLite！" class="headerlink" title="4.否则 → 选择 SQLite！"></a>4.否则 → 选择 SQLite！</h3><p>对于写入器并发性低且内容少于 TB 的设备本地存储，SQLite 几乎总是一个更好的解决方案。SQLite 快速可靠，无需配置或维护。它使事情变得简单。SQLite“正常工作”。</p><h2 id="如果非要使用sqlite完成多线程的工作呢？"><a href="#如果非要使用sqlite完成多线程的工作呢？" class="headerlink" title="如果非要使用sqlite完成多线程的工作呢？"></a>如果非要使用sqlite完成多线程的工作呢？</h2><pre><code>首先我们得明白sqlite对于线程的管理模式，线程同步是否支持，线程是否能安全运行，我们同样可以从官方文档中获得我们需要的答案，如下。</code></pre><h2 id="多个应用程序或同一应用程序的多个实例可以同时访问一个数据库文件吗？"><a href="#多个应用程序或同一应用程序的多个实例可以同时访问一个数据库文件吗？" class="headerlink" title="多个应用程序或同一应用程序的多个实例可以同时访问一个数据库文件吗？"></a>多个应用程序或同一应用程序的多个实例可以同时访问一个数据库文件吗？</h2><p>多个进程可以同时打开同一个数据库。多个进程可以同时执行 SELECT。但是，任何时候只有一个进程可以对数据库进行更改。</p><p>SQLite 使用读/写锁来控制对数据库的访问。（在不支持读/写锁的 Win95/98/ME 下，改为使用概率模拟。）但请注意：如果数据库文件保存在 NFS 文件系统上，此锁定机制可能无法正常工作。这是因为 fcntl() 文件锁定在许多 NFS 实现中被破坏。如果多个进程可能尝试同时访问该文件，则应避免将 SQLite 数据库文件放在 NFS 上。在 Windows 上，Microsoft 的文档说如果您没有运行 Share.exe 守护程序，锁定可能无法在 FAT 文件系统下工作。对 Windows 有很多经验的人告诉我，网络文件的文件锁定非常有问题，而且不可靠。如果他们说的是真的，</p><p>我们知道没有其他嵌入式SQL 数据库引擎支持与 SQLite 一样多的并发性。SQLite 允许多个进程一次打开数据库文件，并允许多个进程一次读取数据库。当任何进程想要写入时，它必须在其更新期间锁定整个数据库文件。但这通常只需要几毫秒。其他流程只是等待作者完成，然后继续他们的业务。其他嵌入式 SQL 数据库引擎通常只允许单个进程一次连接到数据库。</p><p>但是，客户端/服务器数据库引擎（例如 PostgreSQL、MySQL 或 Oracle）通常支持更高级别的并发性，并允许多个进程同时写入同一个数据库。这在客户端/服务器数据库中是可能的，因为始终有一个受良好控制的服务器进程可用于协调访问。如果您的应用程序需要大量并发，那么您应该考虑使用客户端/服务器数据库。但经验表明，大多数应用程序需要的并发性远低于其设计者的想象。</p><p>当 SQLite 尝试访问被另一个进程锁定的文件时，默认行为是返回 SQLITE_BUSY。您可以使用sqlite3_busy_handler()或sqlite3_busy_timeout() API 函数从 C 代码调整此行为 。</p><h2 id="SQLite-支持三种不同的线程模式："><a href="#SQLite-支持三种不同的线程模式：" class="headerlink" title="SQLite 支持三种不同的线程模式："></a>SQLite 支持三种不同的线程模式：</h2><h4 id="1-单线程。在这种模式下，所有互斥锁都被禁用，SQLite-一次在多个线程中使用是不安全的。"><a href="#1-单线程。在这种模式下，所有互斥锁都被禁用，SQLite-一次在多个线程中使用是不安全的。" class="headerlink" title="1.单线程。在这种模式下，所有互斥锁都被禁用，SQLite 一次在多个线程中使用是不安全的。"></a>1.单线程。在这种模式下，所有互斥锁都被禁用，SQLite 一次在多个线程中使用是不安全的。</h4><h4 id="2-多线程。在这种模式下，SQLite-可以被多个线程安全地使用，前提是没有在两个或多个线程中同时使用单个数据库连接。"><a href="#2-多线程。在这种模式下，SQLite-可以被多个线程安全地使用，前提是没有在两个或多个线程中同时使用单个数据库连接。" class="headerlink" title="2.多线程。在这种模式下，SQLite 可以被多个线程安全地使用，前提是没有在两个或多个线程中同时使用单个数据库连接。"></a>2.多线程。在这种模式下，SQLite 可以被多个线程安全地使用，前提是没有在两个或多个线程中同时使用单个数据库连接。</h4><h4 id="3-序列化-在序列化模式下，SQLite-可以不受限制地被多个线程安全使用。"><a href="#3-序列化-在序列化模式下，SQLite-可以不受限制地被多个线程安全使用。" class="headerlink" title="3.序列化. 在序列化模式下，SQLite 可以不受限制地被多个线程安全使用。"></a>3.序列化. 在序列化模式下，SQLite 可以不受限制地被多个线程安全使用。</h4><p>可以在编译时（从源代码编译 SQLite 库时）或在启动时（当打算使用 SQLite 的应用程序正在初始化时）或在运行时（当新的 SQLite 数据库时）选择线程模式正在创建连接）。一般来说，运行时会覆盖开始时间，而开始时间会覆盖编译时。除了，单线程模式一旦选择就不能被覆盖。</p><p><strong>1.默认模式是序列化的。</strong></p><h3 id="2-线程模式的编译时选择"><a href="#2-线程模式的编译时选择" class="headerlink" title="2.线程模式的编译时选择"></a>2.线程模式的编译时选择</h3><p>使用SQLITE_THREADSAFE编译时参数来选择线程模式。如果不存在SQLITE_THREADSAFE编译时参数，则使用序列化模式。这可以通过 -DSQLITE_THREADSAFE=1明确说明。使用 -DSQLITE_THREADSAFE=0时，线程模式为单线程。使用 -DSQLITE_THREADSAFE=2时，线程模式为多线程。</p><p>sqlite3_threadsafe()接口 的返回值是在编译时设置的 SQLITE_THREADSAFE 的值。它不反映在运行时通过sqlite3_config()接口或作为sqlite3_open_v2() 的第三个参数给出的标志对线程模式所做的更改。</p><p>如果在编译时选择了单线程模式，则构建中会省略关键的互斥逻辑，并且不可能在启动时或运行时启用多线程或序列化模式。</p><h3 id="3-线程模式的开始时间选择"><a href="#3-线程模式的开始时间选择" class="headerlink" title="3.线程模式的开始时间选择"></a>3.线程模式的开始时间选择</h3><p>假设编译时线程模式不是单线程，那么可以在初始化期间使用 sqlite3_config()接口更改线程模式。SQLITE_CONFIG_SINGLETHREAD动词将SQLite 置于单线程模式，SQLITE_CONFIG_MULTITHREAD 动词设置多线程模式，SQLITE_CONFIG_SERIALIZED动词设置序列化模式。</p><h3 id="4-线程模式的运行时选择"><a href="#4-线程模式的运行时选择" class="headerlink" title="4.线程模式的运行时选择"></a>4.线程模式的运行时选择</h3><p>如果在编译时或启动时未选择单线程模式，则可以将单个数据库连接创建为多线程或序列化。无法将单个数据库连接降级为单线程模式。如果编译时或启动时模式是单线程的，也不可能升级单个数据库连接。</p><p>单个数据库连接的线程模式由作为sqlite3_open_v2()的第三个参数给出的标志确定。SQLITE_OPEN_NOMUTEX 标志使数据库连接处于多线程模式，而SQLITE_OPEN_FULLMUTEX标志使连接处于序列化模式。如果没有指定标志，或者如果使用 sqlite3_open()或sqlite3_open16()而不是 sqlite3_open_v2()，则使用由编译时和启动时设置确定的默认模式。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>c 指针</title>
    <link href="/2022/04/09/c-%E6%8C%87%E9%92%88/"/>
    <url>/2022/04/09/c-%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<ul><li><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a><strong>指针</strong></h2><ul><li><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h3><ul><li>指针变量一种变量，占用存储空间，使用&amp;获取它的地址。</li></ul></li><li><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a><strong>作用</strong></h3><ul><li>通过传递一级指针，可以在函数内部修改实参指针指向的内容</li></ul></li><li><h3 id="指针参数的妙用"><a href="#指针参数的妙用" class="headerlink" title="指针参数的妙用"></a><strong>指针参数的妙用</strong></h3>对于标量参数，其实比较简单，相当于一个计算器，输入值，得到结果，而指针参数的框架，虽然我们传入的是一个“地址”值，但是只要有这一个地址值，^^理论上我们可以对这个地址值 上下 n个地址的内存进行操作^^，这就意味着：<ul><li>（1）我们可以通过指针参数，传递多个数据，而不是通过多个标参。这里说的 多个数据可以是很多。比如在操作系统编程中，我们创建新的线程时，如果想要给新线程传递参数，就是通过一个(void *)指针来进行参数传递的。当然了，我们传递的指针，必须是有效地址，“有效”的含义是，要么是通过数组定义、静态变量，要么是通过动态内存申请（malloc），不能随便传递一个野指针，毕竟我们在函数或者线程中，对该指针进行间接操作时，尤其进行“写”操作，会非常危险。</li><li>（2）比较简单的，我们通过指针参数，可以实现一个函数返回n个数据，当然这个前提也是我们要提前分配好存放着n个数据的内存区域，比如数组或动态内存分配。</li><li></li></ul></li></ul></li><li><h2 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a><strong>二级指针</strong></h2><ul><li>作用<ul><li>^^在函数传递参数的时候，通过指针给主调函数中的变量间接复制，是指针存在最大的意义^^。<ul><li>例如^^在被调函数中改变主调函数中变量的值^^，可以在函数调用的时候将变量的地址传递过去<h2 id="在被调函数中使用一级指针来接受，在被调函数中可以通过指针来间接改变变量的值"><a href="#在被调函数中使用一级指针来接受，在被调函数中可以通过指针来间接改变变量的值" class="headerlink" title="在被调函数中使用一级指针来接受，在被调函数中可以通过指针来间接改变变量的值"></a>在被调函数中使用一级指针来接受，在被调函数中可以通过指针来间接改变变量的值</h2><pre><code>``                   #include &lt;stdio.h&gt;                  int main(void)                  &#123;                      int a = 10;                      int* p = &amp;a;                      int** q = &amp;p;                                          printf(&quot;a   = %d\n&quot;, a);                      printf(&quot;&amp;a  = %p\n&quot;, &amp;a);                      printf(&quot;p   = %p\n&quot;, p);                      printf(&quot;&amp;p  = %p\n&quot;, &amp;p);                      printf(&quot;*p  = %d\n&quot;, *p);                      printf(&quot;q   = %p\n&quot;, q);                      printf(&quot;&amp;q  = %p\n&quot;, &amp;q);                      printf(&quot;*q  = %p\n&quot;, *q);                      printf(&quot;**q = %d\n&quot;, **q);                        return 0;                  &#125;````                   a   = 10                  &amp;a  = 0000004B0039F854                  p   = 0000004B0039F854                  &amp;p  = 0000004B0039F878                  *p  = 10                  q   = 0000004B0039F878                  &amp;q  = 0000004B0039F898                  *q  = 0000004B0039F854                  **q = 10``</code></pre></li><li>同理，^^在被调函数中要改变主调函数中一级指针的值^^，可以在被调函数中通过二级指针接受一级指针的地址，从而实现在被调函数中改变一级指针的值。</li><li><h2 id="同时这样做还有一个好处就是，通过上面的那种方式，即在被调函数中通过地址来间接改变变量-指针也是一种变量-值的方式，就可以-在被调函数中改变多个变量的值-。而只是让函数返回函数执行状态的值，这样就可以判断出现了哪种情况。"><a href="#同时这样做还有一个好处就是，通过上面的那种方式，即在被调函数中通过地址来间接改变变量-指针也是一种变量-值的方式，就可以-在被调函数中改变多个变量的值-。而只是让函数返回函数执行状态的值，这样就可以判断出现了哪种情况。" class="headerlink" title="同时这样做还有一个好处就是，通过上面的那种方式，即在被调函数中通过地址来间接改变变量(指针也是一种变量)值的方式，就可以 ^^在被调函数中改变多个变量的值^^。而只是让函数返回函数执行状态的值，这样就可以判断出现了哪种情况。"></a>同时这样做还有一个好处就是，通过上面的那种方式，即在被调函数中通过地址来间接改变变量(指针也是一种变量)值的方式，就可以 ^^在被调函数中改变多个变量的值^^。而只是让函数返回函数执行状态的值，这样就可以判断出现了哪种情况。</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment">改变函数中的多个值</span><br><span class="hljs-comment">    func 函数接收已经赋值的*src 与 *cstr **src</span><br><span class="hljs-comment">    *stc 获得src 与 cstr 的结合字符串</span><br><span class="hljs-comment">    并返回src 与 cstr 的结合字符串 </span><br><span class="hljs-comment">*/</span>  <br><span class="hljs-comment">// point.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span>   </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span>   </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">typedef</span>  <span class="hljs-keyword">char</span> u8;<br><span class="hljs-function">u8* <span class="hljs-title">func</span><span class="hljs-params">(u8* src, u8* cstr, u8** str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;end call *str:%d\n&quot;</span>, *str);<br>    *str = <span class="hljs-built_in">strstr</span>(src, cstr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;end call *str:%d\n&quot;</span>, *str);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">strstr</span>(src, cstr);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span> </span>&#123;<br>    u8* src = (u8*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;OBSYYYYMMDD&quot;</span>) + <span class="hljs-number">1</span>);<br>    u8* cstr = (u8*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;OBSYYYYMMDD&quot;</span>) + <span class="hljs-number">1</span>);<br>    src = (u8*)<span class="hljs-string">&quot;abcdefg123ef&quot;</span>;<span class="hljs-comment">//格式转换 直接赋值存在问题</span><br>    cstr = (u8*)<span class="hljs-string">&quot;cde&quot;</span>;<br>    u8* str1 = <span class="hljs-literal">NULL</span>;<br>    u8* str2 = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;src addr:%d\n&quot;</span>, src);<br>    str1 = func(src, cstr, &amp;str2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str1:%s\n&quot;</span>, str1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str2:%s\n&quot;</span>, str2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>结果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">src addr:<span class="hljs-number">4210706</span>   <br>end call *str:<span class="hljs-number">0</span>    <br>end call *str:<span class="hljs-number">4210708</span>   <br>str1:cdefg123ef   <br>str2:cdefg123ef<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li>二级指针不但可以将变量通过参数”带入”函数内部, 也^^可以将函数内部变量”带出”到函数外部^^.<pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* a, <span class="hljs-keyword">int</span>* b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> tmp = *a;<br>*a = *b;<br>*b = tmp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">boy_home</span><span class="hljs-params">(<span class="hljs-keyword">int</span>** meipo)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> boy = <span class="hljs-number">23</span>;<br>*meipo = &amp;boy;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/* 版本1 普通指针 */</span><br><span class="hljs-keyword">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> y = <span class="hljs-number">100</span>;<br>swap(&amp;x, &amp;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x=%d, y=%d\n&quot;</span>, x, y);<br><br><span class="hljs-comment">/* 版本2 二级指针 */</span><br><span class="hljs-keyword">int</span>* meipo = <span class="hljs-literal">NULL</span>;<br>boy_home(&amp;meipo);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;boy: %d\n&quot;</span>, *meipo);<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h2 id=""><a href="#" class="headerlink" title="  -"></a>  -</h2>  -</li></ul></li><li><h2 id="指针函数"><a href="#指针函数" class="headerlink" title="指针函数"></a><strong>指针函数</strong></h2><ul><li>指针函数的返回值是一个指针</li><li>在 main() 函数中调用该指针函数的时候，可以使用一个同类型的指针来接收。</li><li>指针函数的作用之一就是解决一个函数中存在多个返回值的时候，如何返回这多个数值的问题。</li></ul></li><li><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><ul><li><a href="https://github.com/clayzhu/PointersOnC-Document">c与指针——实例代码</a></li><li>[[C与指针读书笔记]]</li></ul></li><li><h2 id="练习题解"><a href="#练习题解" class="headerlink" title="练习题解"></a><strong>练习题解</strong></h2><ul><li>swap函数解析</li></ul></li><li><h2 id="前缀知识点"><a href="#前缀知识点" class="headerlink" title="前缀知识点"></a><strong>前缀知识点</strong></h2><ul><li><strong>函数传递参数</strong><ul><li>值调用</li><li>引用调用</li><li>传地址调用</li></ul></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>github 博客操作记录</title>
    <link href="/2022/04/09/hexo-%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/04/09/hexo-%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="阅读Hexo-Fluid-用户手册"><a href="#阅读Hexo-Fluid-用户手册" class="headerlink" title="阅读Hexo Fluid 用户手册"></a>阅读Hexo Fluid 用户手册</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo 第一次博客</title>
    <link href="/2021/12/30/hello-world/"/>
    <url>/2021/12/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>hexo博客搭建成功记录</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="修改完后，"><a href="#修改完后，" class="headerlink" title="修改完后，"></a><strong>修改完后，</strong></h2><p>使用<code>hexo clean</code>—-&gt;<code>hexo g</code>—-&gt;<code>hexo d</code>即可推送至远端。</p><h3 id="假期计划"><a href="#假期计划" class="headerlink" title="假期计划"></a>假期计划</h3><p>周更博客！！！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
