<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>c 指针</title>
    <link href="/2022/04/09/c-%E6%8C%87%E9%92%88/"/>
    <url>/2022/04/09/c-%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<ul><li><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a><strong>指针</strong></h2><ul><li><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h3><ul><li>指针变量一种变量，占用存储空间，使用&amp;获取它的地址。</li></ul></li><li><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a><strong>作用</strong></h3><ul><li>通过传递一级指针，可以在函数内部修改实参指针指向的内容</li></ul></li><li><h3 id="指针参数的妙用"><a href="#指针参数的妙用" class="headerlink" title="指针参数的妙用"></a><strong>指针参数的妙用</strong></h3>对于标量参数，其实比较简单，相当于一个计算器，输入值，得到结果，而指针参数的框架，虽然我们传入的是一个“地址”值，但是只要有这一个地址值，^^理论上我们可以对这个地址值 上下 n个地址的内存进行操作^^，这就意味着：<ul><li>（1）我们可以通过指针参数，传递多个数据，而不是通过多个标参。这里说的 多个数据可以是很多。比如在操作系统编程中，我们创建新的线程时，如果想要给新线程传递参数，就是通过一个(void *)指针来进行参数传递的。当然了，我们传递的指针，必须是有效地址，“有效”的含义是，要么是通过数组定义、静态变量，要么是通过动态内存申请（malloc），不能随便传递一个野指针，毕竟我们在函数或者线程中，对该指针进行间接操作时，尤其进行“写”操作，会非常危险。</li><li>（2）比较简单的，我们通过指针参数，可以实现一个函数返回n个数据，当然这个前提也是我们要提前分配好存放着n个数据的内存区域，比如数组或动态内存分配。</li><li></li></ul></li></ul></li><li><h2 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a><strong>二级指针</strong></h2><ul><li>作用<ul><li>^^在函数传递参数的时候，通过指针给主调函数中的变量间接复制，是指针存在最大的意义^^。<ul><li>例如^^在被调函数中改变主调函数中变量的值^^，可以在函数调用的时候将变量的地址传递过去<h2 id="在被调函数中使用一级指针来接受，在被调函数中可以通过指针来间接改变变量的值"><a href="#在被调函数中使用一级指针来接受，在被调函数中可以通过指针来间接改变变量的值" class="headerlink" title="在被调函数中使用一级指针来接受，在被调函数中可以通过指针来间接改变变量的值"></a>在被调函数中使用一级指针来接受，在被调函数中可以通过指针来间接改变变量的值</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span>* p = &amp;a;<br><span class="hljs-keyword">int</span>** q = &amp;p;<br>  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a   = %d\n&quot;</span>, a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;a  = %p\n&quot;</span>, &amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p   = %p\n&quot;</span>, p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;p  = %p\n&quot;</span>, &amp;p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p  = %d\n&quot;</span>, *p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;q   = %p\n&quot;</span>, q);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;q  = %p\n&quot;</span>, &amp;q);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*q  = %p\n&quot;</span>, *q);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;**q = %d\n&quot;</span>, **q);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>结果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">a   = <span class="hljs-number">10</span><br>&amp;a  = <span class="hljs-number">0000004B</span>0039F854<br>p   = <span class="hljs-number">0000004B</span>0039F854<br>&amp;p  = <span class="hljs-number">0000004B</span>0039F878<br>*p  = <span class="hljs-number">10</span><br>q   = <span class="hljs-number">0000004B</span>0039F878<br>&amp;q  = <span class="hljs-number">0000004B</span>0039F898<br>*q  = <span class="hljs-number">0000004B</span>0039F854<br>**q = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure></code></pre></li><li>同理，^^在被调函数中要改变主调函数中一级指针的值^^，可以在被调函数中通过二级指针接受一级指针的地址，从而实现在被调函数中改变一级指针的值。</li><li><h2 id="同时这样做还有一个好处就是，通过上面的那种方式，即在被调函数中通过地址来间接改变变量-指针也是一种变量-值的方式，就可以-在被调函数中改变多个变量的值-。而只是让函数返回函数执行状态的值，这样就可以判断出现了哪种情况。"><a href="#同时这样做还有一个好处就是，通过上面的那种方式，即在被调函数中通过地址来间接改变变量-指针也是一种变量-值的方式，就可以-在被调函数中改变多个变量的值-。而只是让函数返回函数执行状态的值，这样就可以判断出现了哪种情况。" class="headerlink" title="同时这样做还有一个好处就是，通过上面的那种方式，即在被调函数中通过地址来间接改变变量(指针也是一种变量)值的方式，就可以 ^^在被调函数中改变多个变量的值^^。而只是让函数返回函数执行状态的值，这样就可以判断出现了哪种情况。"></a>同时这样做还有一个好处就是，通过上面的那种方式，即在被调函数中通过地址来间接改变变量(指针也是一种变量)值的方式，就可以 ^^在被调函数中改变多个变量的值^^。而只是让函数返回函数执行状态的值，这样就可以判断出现了哪种情况。</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment">改变函数中的多个值</span><br><span class="hljs-comment">    func 函数接收已经赋值的*src 与 *cstr **src</span><br><span class="hljs-comment">    *stc 获得src 与 cstr 的结合字符串</span><br><span class="hljs-comment">    并返回src 与 cstr 的结合字符串 </span><br><span class="hljs-comment">*/</span>  <br><span class="hljs-comment">// point.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span>   </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span>   </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">typedef</span>  <span class="hljs-keyword">char</span> u8;<br><span class="hljs-function">u8* <span class="hljs-title">func</span><span class="hljs-params">(u8* src, u8* cstr, u8** str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;end call *str:%d\n&quot;</span>, *str);<br>    *str = <span class="hljs-built_in">strstr</span>(src, cstr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;end call *str:%d\n&quot;</span>, *str);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">strstr</span>(src, cstr);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span> </span>&#123;<br>    u8* src = (u8*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;OBSYYYYMMDD&quot;</span>) + <span class="hljs-number">1</span>);<br>    u8* cstr = (u8*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;OBSYYYYMMDD&quot;</span>) + <span class="hljs-number">1</span>);<br>    src = (u8*)<span class="hljs-string">&quot;abcdefg123ef&quot;</span>;<span class="hljs-comment">//格式转换 直接赋值存在问题</span><br>    cstr = (u8*)<span class="hljs-string">&quot;cde&quot;</span>;<br>    u8* str1 = <span class="hljs-literal">NULL</span>;<br>    u8* str2 = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;src addr:%d\n&quot;</span>, src);<br>    str1 = func(src, cstr, &amp;str2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str1:%s\n&quot;</span>, str1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str2:%s\n&quot;</span>, str2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>结果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">src addr:<span class="hljs-number">4210706</span>   <br>end call *str:<span class="hljs-number">0</span>    <br>end call *str:<span class="hljs-number">4210708</span>   <br>str1:cdefg123ef   <br>str2:cdefg123ef<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li>二级指针不但可以将变量通过参数”带入”函数内部, 也^^可以将函数内部变量”带出”到函数外部^^.<pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* a, <span class="hljs-keyword">int</span>* b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> tmp = *a;<br>*a = *b;<br>*b = tmp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">boy_home</span><span class="hljs-params">(<span class="hljs-keyword">int</span>** meipo)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> boy = <span class="hljs-number">23</span>;<br>*meipo = &amp;boy;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/* 版本1 普通指针 */</span><br><span class="hljs-keyword">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> y = <span class="hljs-number">100</span>;<br>swap(&amp;x, &amp;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x=%d, y=%d\n&quot;</span>, x, y);<br><br><span class="hljs-comment">/* 版本2 二级指针 */</span><br><span class="hljs-keyword">int</span>* meipo = <span class="hljs-literal">NULL</span>;<br>boy_home(&amp;meipo);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;boy: %d\n&quot;</span>, *meipo);<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h2 id=""><a href="#" class="headerlink" title="  -"></a>  -</h2>  -</li></ul></li><li><h2 id="指针函数"><a href="#指针函数" class="headerlink" title="指针函数"></a><strong>指针函数</strong></h2><ul><li>指针函数的返回值是一个指针</li><li>在 main() 函数中调用该指针函数的时候，可以使用一个同类型的指针来接收。</li><li>指针函数的作用之一就是解决一个函数中存在多个返回值的时候，如何返回这多个数值的问题。</li></ul></li><li><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><ul><li><a href="https://github.com/clayzhu/PointersOnC-Document">c与指针——实例代码</a></li><li>[[C与指针读书笔记]]</li></ul></li><li><h2 id="练习题解"><a href="#练习题解" class="headerlink" title="练习题解"></a><strong>练习题解</strong></h2><ul><li>swap函数解析</li></ul></li><li><h2 id="前缀知识点"><a href="#前缀知识点" class="headerlink" title="前缀知识点"></a><strong>前缀知识点</strong></h2><ul><li><strong>函数传递参数</strong><ul><li>值调用</li><li>引用调用</li><li>传地址调用</li></ul></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>github 博客操作记录</title>
    <link href="/2022/04/09/hexo-%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/04/09/hexo-%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="阅读Hexo-Fluid-用户手册"><a href="#阅读Hexo-Fluid-用户手册" class="headerlink" title="阅读Hexo Fluid 用户手册"></a>阅读Hexo Fluid 用户手册</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo 第一次博客</title>
    <link href="/2021/12/30/hello-world/"/>
    <url>/2021/12/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>hexo博客搭建成功记录</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="修改完后，"><a href="#修改完后，" class="headerlink" title="修改完后，"></a><strong>修改完后，</strong></h2><p>使用<code>hexo clean</code>—-&gt;<code>hexo g</code>—-&gt;<code>hexo d</code>即可推送至远端。</p><h3 id="假期计划"><a href="#假期计划" class="headerlink" title="假期计划"></a>假期计划</h3><p>周更博客！！！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
